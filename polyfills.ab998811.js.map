{"version":3,"sources":["scripts/polyfills/NodeList.forEach.js","scripts/polyfills/classList.js","scripts/polyfills/Number.ParseInt.js","scripts/polyfills.js"],"names":["NodeList","prototype","forEach","callback","thisArg","window","i","length","call","self","document","createElement","createElementNS","view","classListProp","elemCtrProto","Element","objCtr","Object","strTrim","String","trim","replace","arrIndexOf","Array","indexOf","item","len","DOMEx","type","message","name","code","DOMException","checkTokenAndGetIndex","classList","token","test","ClassList","elem","trimmedClasses","getAttribute","classes","split","push","_updateClassName","setAttribute","toString","classListProto","classListGetter","Error","contains","add","tokens","arguments","l","updated","remove","index","splice","toggle","force","result","method","join","defineProperty","classListPropDesc","get","enumerable","configurable","ex","undefined","number","__defineGetter__","testElement","createMethod","original","DOMTokenList","_toggle","Number","parseInt","require"],"mappings":"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","file":"polyfills.ab998811.js","sourceRoot":"../src","sourcesContent":["NodeList.prototype.forEach = function(callback, thisArg) {\n  thisArg = thisArg || window;\n  for (var i = 0; i < this.length; i++) {\n    callback.call(thisArg, this[i], i, this);\n  }\n};\n","/*\n * classList.js: Cross-browser full element.classList implementation.\n * 1.1.20170427\n *\n * By Eli Grey, http://eligrey.com\n * License: Dedicated to the public domain.\n *   See https://github.com/eligrey/classList.js/blob/master/LICENSE.md\n */\n\n/*global self, document, DOMException */\n\n/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */\n\nif ('document' in window.self) {\n  // Full polyfill for browsers with no classList support\n  // Including IE < Edge missing SVGElement.classList\n  if (\n    !('classList' in document.createElement('_')) ||\n    (document.createElementNS &&\n      !(\n        'classList' in\n        document.createElementNS('http://www.w3.org/2000/svg', 'g')\n      ))\n  ) {\n    (function(view) {\n      'use strict';\n\n      if (!('Element' in view)) return;\n\n      var classListProp = 'classList',\n        protoProp = 'prototype',\n        elemCtrProto = view.Element[protoProp],\n        objCtr = Object,\n        strTrim =\n          String[protoProp].trim ||\n          function() {\n            return this.replace(/^\\s+|\\s+$/g, '');\n          },\n        arrIndexOf =\n          Array[protoProp].indexOf ||\n          function(item) {\n            var i = 0,\n              len = this.length;\n            for (; i < len; i++) {\n              if (i in this && this[i] === item) {\n                return i;\n              }\n            }\n            return -1;\n          },\n        // Vendors: please allow content code to instantiate DOMExceptions\n        DOMEx = function(type, message) {\n          this.name = type;\n          this.code = DOMException[type];\n          this.message = message;\n        },\n        checkTokenAndGetIndex = function(classList, token) {\n          if (token === '') {\n            throw new DOMEx(\n              'SYNTAX_ERR',\n              'An invalid or illegal string was specified'\n            );\n          }\n          if (/\\s/.test(token)) {\n            throw new DOMEx(\n              'INVALID_CHARACTER_ERR',\n              'String contains an invalid character'\n            );\n          }\n          return arrIndexOf.call(classList, token);\n        },\n        ClassList = function(elem) {\n          var trimmedClasses = strTrim.call(elem.getAttribute('class') || ''),\n            classes = trimmedClasses ? trimmedClasses.split(/\\s+/) : [],\n            i = 0,\n            len = classes.length;\n          for (; i < len; i++) {\n            this.push(classes[i]);\n          }\n          this._updateClassName = function() {\n            elem.setAttribute('class', this.toString());\n          };\n        },\n        classListProto = (ClassList[protoProp] = []),\n        classListGetter = function() {\n          return new ClassList(this);\n        };\n      // Most DOMException implementations don't allow calling DOMException's toString()\n      // on non-DOMExceptions. Error's toString() is sufficient here.\n      DOMEx[protoProp] = Error[protoProp];\n      classListProto.item = function(i) {\n        return this[i] || null;\n      };\n      classListProto.contains = function(token) {\n        token += '';\n        return checkTokenAndGetIndex(this, token) !== -1;\n      };\n      classListProto.add = function() {\n        var tokens = arguments,\n          i = 0,\n          l = tokens.length,\n          token,\n          updated = false;\n        do {\n          token = tokens[i] + '';\n          if (checkTokenAndGetIndex(this, token) === -1) {\n            this.push(token);\n            updated = true;\n          }\n        } while (++i < l);\n\n        if (updated) {\n          this._updateClassName();\n        }\n      };\n      classListProto.remove = function() {\n        var tokens = arguments,\n          i = 0,\n          l = tokens.length,\n          token,\n          updated = false,\n          index;\n        do {\n          token = tokens[i] + '';\n          index = checkTokenAndGetIndex(this, token);\n          while (index !== -1) {\n            this.splice(index, 1);\n            updated = true;\n            index = checkTokenAndGetIndex(this, token);\n          }\n        } while (++i < l);\n\n        if (updated) {\n          this._updateClassName();\n        }\n      };\n      classListProto.toggle = function(token, force) {\n        token += '';\n\n        var result = this.contains(token),\n          method = result\n            ? force !== true && 'remove'\n            : force !== false && 'add';\n        if (method) {\n          this[method](token);\n        }\n\n        if (force === true || force === false) {\n          return force;\n        } else {\n          return !result;\n        }\n      };\n      classListProto.toString = function() {\n        return this.join(' ');\n      };\n\n      if (objCtr.defineProperty) {\n        var classListPropDesc = {\n          get: classListGetter,\n          enumerable: true,\n          configurable: true\n        };\n        try {\n          objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n        } catch (ex) {\n          // IE 8 doesn't support enumerable:true\n          // adding undefined to fight this issue https://github.com/eligrey/classList.js/issues/36\n          // modernie IE8-MSW7 machine has IE8 8.0.6001.18702 and is affected\n          if (ex.number === undefined || ex.number === -0x7ff5ec54) {\n            classListPropDesc.enumerable = false;\n            objCtr.defineProperty(\n              elemCtrProto,\n              classListProp,\n              classListPropDesc\n            );\n          }\n        }\n      } else if (objCtr[protoProp].__defineGetter__) {\n        elemCtrProto.__defineGetter__(classListProp, classListGetter);\n      }\n    })(window.self);\n  }\n\n  // There is full or partial native classList support, so just check if we need\n  // to normalize the add/remove and toggle APIs.\n\n  (function() {\n    'use strict';\n\n    var testElement = document.createElement('_');\n\n    testElement.classList.add('c1', 'c2');\n\n    // Polyfill for IE 10/11 and Firefox <26, where classList.add and\n    // classList.remove exist but support only one argument at a time.\n    if (!testElement.classList.contains('c2')) {\n      var createMethod = function(method) {\n        var original = DOMTokenList.prototype[method];\n\n        DOMTokenList.prototype[method] = function(token) {\n          var i,\n            len = arguments.length;\n\n          for (i = 0; i < len; i++) {\n            token = arguments[i];\n            original.call(this, token);\n          }\n        };\n      };\n      createMethod('add');\n      createMethod('remove');\n    }\n\n    testElement.classList.toggle('c3', false);\n\n    // Polyfill for IE 10 and Firefox <24, where classList.toggle does not\n    // support the second argument.\n    if (testElement.classList.contains('c3')) {\n      var _toggle = DOMTokenList.prototype.toggle;\n\n      DOMTokenList.prototype.toggle = function(token, force) {\n        if (1 in arguments && !this.contains(token) === !force) {\n          return force;\n        } else {\n          return _toggle.call(this, token);\n        }\n      };\n    }\n\n    testElement = null;\n  })();\n}\n","Number.parseInt = window.parseInt;\n","// NodeList.prototype.forEach\nif (window.NodeList && !NodeList.prototype.forEach) {\n  require('./polyfills/NodeList.forEach');\n}\nrequire('./polyfills/classList');\nif (Number.parseInt === undefined) {\n  require('./polyfills/Number.ParseInt');\n}\n"]}