{"version":3,"sources":["scripts/register-sw.js","scripts/utils.js","scripts/script.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","navigator","publicUrl","URL","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","fetch","response","status","headers","get","indexOf","unregister","reload","smoothScrollLinks","document","querySelectorAll","forEach","el","target","querySelector","getAttribute","scrollTo","top","getBoundingClientRect","scrollY","behavior","onload","animateBG","arrowAnimate","classList","add","setTimeout","remove","setupClick","element","isTablet","matchMedia","matches","isMobile","multiplier","startwidth","size","style","cssText","Number","parseInt","width","ele","contains","innerHeight"],"mappings":";AAmGC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAlGD,IAAMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAIS,SAASC,IAClB,GAAyC,kBAAmBC,UAAW,CAGrEC,GADc,IAAIC,IAAI,IAAKP,OAAOC,UACxBO,SAAWR,OAAOC,SAASO,OAIvC,OAGFR,OAAOS,iBAAiB,OAAQ,WACxBC,IAAAA,EAAN,qBAEIZ,GAEFa,EAAwBD,GAIxBL,UAAUO,cAAcC,MAAMC,KAAK,WACjCC,QAAQC,IACN,+GAMJC,EAAgBP,MAMxB,SAASO,EAAgBP,GACvBL,UAAUO,cACPR,SAASM,GACTI,KAAK,SAAAI,GACJA,EAAaC,cAAgB,WACrBC,IAAAA,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACflB,UAAUO,cAAcY,WAK1BT,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBS,MAAM,SAAAC,GACLX,QAAQW,MAAM,4CAA6CA,KAIjE,SAASf,EAAwBD,GAE/BiB,MAAMjB,GACHI,KAAK,SAAAc,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUO,cAAcC,MAAMC,KAAK,SAAAI,GACjCA,EAAae,aAAanB,KAAK,WAC7Bd,OAAOC,SAASiC,aAKpBjB,EAAgBP,KAGnBe,MAAM,WACLV,QAAQC,IACN;;AChGD,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,uBAAA,EAAA,IAAMmB,EAAoB,WACjBC,SAASC,iBAAiB,eAClCC,QAAQ,SAAAC,GACZA,EAAG9B,iBAAiB,QAAS,WACrB+B,IAAAA,EAASJ,SAASK,cAAcF,EAAGG,aAAa,cAClDF,GACFxC,OAAO2C,SAAS,CACdC,IAAKJ,EAAOK,wBAAwBD,IAAM5C,OAAO8C,QACjDC,SAAU,gBARb,QAAA,kBAAA;;ACsDP,aAtDA,IAAA,EAAA,EAAA,QAAA,kBACA,EAAA,QAAA,WAqDA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAnDA/C,OAAOgD,OAAS,WACdhD,OAAOS,iBAAiB,SAAUwC,GAClCjD,OAAOS,iBAAiB,SAAUwC,GAClCjD,OAAOS,iBAAiB,SAAUyC,GAClCd,SAASC,iBAAiB,uBAAuBC,QAAQ,SAAAC,GACvDA,EAAGY,UAAUC,IAAI,iBACjBC,WAAW,WACTd,EAAGY,UAAUG,OAAO,iBACpBf,EAAGY,UAAUC,IAAI,mBAChB,QAELH,IACAC,IACAK,KACA,EAAA,EAAA,YACA,EAAA,EAAA,sBAGF,IAAMN,EAAY,WACVO,IAAAA,EAAUpB,SAASK,cAAc,gBACjCgB,EAAWzD,OAAO0D,WAAW,sBAAsBC,QACnDC,EAAW5D,OAAO0D,WAAW,sBAAsBC,QACnDE,EAAaJ,EAAYG,EAAW,IAAO,IAAQ,GACnDE,EAAaL,EAAYG,EAAW,GAAK,GAAM,GACjD5D,GAAAA,OAAO8C,QAAU,IAAK,CACxBV,SAASK,cAAc,QAAQU,UAAUC,IAAI,aACvCW,IAAAA,EAAO/D,OAAO8C,QAAUe,EAAaC,EAC3CN,EAAQQ,MAAMC,QAAoBF,UAAAA,OAAAA,EAAlC,UAEA3B,SAASK,cAAc,QAAQU,UAAUG,OAAO,aAChDE,EAAQQ,MAAMC,QAAd,YAGAC,OAAOC,SAAS/B,SAASK,cAAc,gBAAgBuB,MAAMI,QAAU,KACpDX,EACnBrB,SAASK,cAAc,QAAQU,UAAUC,IAAI,cAC1ChB,SAASK,cAAc,QAAQU,UAAUG,OAAO,eAGjDJ,EAAe,WACflD,OAAO8C,QAAU,EACnBV,SAASC,iBAAiB,uBAAuBC,QAAQ,SAAAC,GACvDA,EAAGY,UAAUC,IAAI,QAGnBhB,SAASC,iBAAiB,uBAAuBC,QAAQ,SAAAC,GACvDA,EAAGY,UAAUG,OAAO,SAKpBC,EAAa,WACHnB,SAASC,iBAAiB,uBAClCC,QAAQ,SAAA+B,GACZA,EAAI5D,iBAAiB,QAAS,SAAA8B,GACvB8B,EAAIlB,UAAUmB,SAAS,MAG1BtE,OAAO2C,SAAS,CAAEC,IAAK,EAAGG,SAAU,WAFpC/C,OAAO2C,SAAS,CAAEC,IAAK5C,OAAOuE,YAAaxB,SAAU","file":"script.e40bda7c.js","sourceRoot":"../src","sourcesContent":["// Modified codes from CRA\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL('/', window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n","export const smoothScrollLinks = () => {\n  const links = document.querySelectorAll('[data-href]');\n  links.forEach(el => {\n    el.addEventListener('click', () => {\n      const target = document.querySelector(el.getAttribute('data-href'));\n      if (target)\n        window.scrollTo({\n          top: target.getBoundingClientRect().top + window.scrollY,\n          behavior: 'smooth'\n        });\n    });\n  });\n};\n","import register from './register-sw';\nimport { smoothScrollLinks } from './utils';\n\nwindow.onload = () => {\n  window.addEventListener('scroll', animateBG);\n  window.addEventListener('resize', animateBG);\n  window.addEventListener('scroll', arrowAnimate);\n  document.querySelectorAll('.arrow.directionist').forEach(el => {\n    el.classList.add('animate-arrow');\n    setTimeout(() => {\n      el.classList.remove('animate-arrow');\n      el.classList.add('done-animating');\n    }, 4300);\n  });\n  animateBG();\n  arrowAnimate();\n  setupClick();\n  register();\n  smoothScrollLinks();\n};\n\nconst animateBG = () => {\n  const element = document.querySelector('.animated-bg');\n  const isTablet = window.matchMedia('(max-width: 900px)').matches;\n  const isMobile = window.matchMedia('(max-width: 650px)').matches;\n  const multiplier = isTablet ? (isMobile ? 0.19 : 0.15) : 0.1;\n  const startwidth = isTablet ? (isMobile ? 36 : 20) : 15;\n  if (window.scrollY > 200) {\n    document.querySelector('body').classList.add('expanding');\n    const size = window.scrollY * multiplier - startwidth;\n    element.style.cssText = `width: ${size}%`;\n  } else {\n    document.querySelector('body').classList.remove('expanding');\n    element.style.cssText = `width: 0%`;\n  }\n  const fillsViewport =\n    Number.parseInt(document.querySelector('.animated-bg').style.width) >= 100;\n  if (fillsViewport && isTablet)\n    document.querySelector('body').classList.add('full-width');\n  else document.querySelector('body').classList.remove('full-width');\n};\n\nconst arrowAnimate = () => {\n  if (window.scrollY > 0) {\n    document.querySelectorAll('.arrow.directionist').forEach(el => {\n      el.classList.add('up');\n    });\n  } else {\n    document.querySelectorAll('.arrow.directionist').forEach(el => {\n      el.classList.remove('up');\n    });\n  }\n};\n\nconst setupClick = () => {\n  const arrow = document.querySelectorAll('.arrow.directionist');\n  arrow.forEach(ele => {\n    ele.addEventListener('click', el => {\n      if (!ele.classList.contains('up')) {\n        window.scrollTo({ top: window.innerHeight, behavior: 'smooth' });\n      } else {\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n      }\n    });\n  });\n};\n"]}